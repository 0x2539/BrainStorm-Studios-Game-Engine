uniform mat4 uMVPMatrix;

attribute vec4 vPosition;
attribute vec2 TexCoordinate;

uniform float RotationAngle;
uniform float ScaleOnX, ScaleOnY;

varying vec2 TexCoordinateGLFS;

void main()
{
	//Scale the body if needed on X
	/*if(ScaleOnX != 0)
	{
		if(vPosition.x < 0)
		{
			vPosition.x = vPosition.x - ScaleOnX / 2.0;
		}
		else
			if(vPosition.x > 0)
			{
				vPosition.x = vPosition.x + ScaleOnX / 2.0;
			}
	}
	
	//Scale the body if needed on Y
	if(ScaleOnY != 0)
	{
		if(vPosition.Y < 0)
		{
			vPosition.y = vPosition.y - ScaleOnY / 2.0;
		}
		else
			if(vPosition.y > 0)
			{
				vPosition.y = vPosition.y + ScaleOnY / 2.0;
			}
	}*/

    TexCoordinateGLFS = TexCoordinate;

    vec4 newPosition = vPosition;

	newPosition.x = vPosition.x * cos(RotationAngle) - vPosition.y * sin(RotationAngle);
	newPosition.y = vPosition.x * sin(RotationAngle) + vPosition.y * cos(RotationAngle);

    gl_Position = uMVPMatrix * newPosition;
}